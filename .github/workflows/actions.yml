name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main  # or whatever branch you want to trigger the workflow on

jobs:
  build-and-push-ecr-image:
    runs-on: ubuntu-latest  
    
    steps:  
      - name: Checkout
        uses: actions/checkout@v2    
        
      - name: Setup AWS ECR Details
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  continuous-deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Pull latest images
        run: |
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.AWS_ECR_REPO }}:latest
         
      - name: Stop and remove existing containers if running
        run: |
          docker ps -q --filter "name=${{ secrets.CELERY_CONTAINER }}" | grep -q . && docker stop ${{ secrets.CELERY_CONTAINER }} && docker rm -fv ${{ secrets.CELERY_CONTAINER }} || true
          docker ps -q --filter "name=${{ secrets.FASTAPI_CONTAINER }}" | grep -q . && docker stop ${{ secrets.FASTAPI_CONTAINER }} && docker rm -fv ${{ secrets.FASTAPI_CONTAINER }} || true
       
      - name: Run Celery Container
        run: |
          docker run -d --name ${{ secrets.CELERY_CONTAINER }} --network=host ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.AWS_ECR_REPO }}:latest celery
          
      - name: Run FastAPI Container
        run: |
          docker run -d --name ${{ secrets.FASTAPI_CONTAINER }} --network=host ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.AWS_ECR_REPO }}:latest
